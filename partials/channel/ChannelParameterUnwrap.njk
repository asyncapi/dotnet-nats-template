
{% macro unwrap(channelName, channelParameters) %}

{%- if channelParameters | length %}
var unmodifiedChannel = {{channelName | realizeChannelNameWithoutParameters | safe}};
var channel = args.Subject;

{%- for parameterName, parameter in channelParameters %}
{%- if prevParameterName | length %}
	var {{parameterName | camelCase}}Split = {{prevParameterName}}Split[1].Split(new string[] { "{{'{'+ parameterName + '}'}}" }, StringSplitOptions.None);
{%- else %}
	var {{parameterName | camelCase}}Split = unmodifiedChannel.Split(new string[] { "{{'{'+ parameterName + '}'}}" }, StringSplitOptions.None);
{%- endif %}
{%- set prevParameterName = (parameterName | camelCase) %}
{%- endfor %}


String[] splits = {
	{%- set counter = 1 %}
	{%- for parameterName, parameter in channelParameters %}
	{%- if counter == (channelParameters | length) %}
		{{parameterName | camelCase}}Split[0],
		{{parameterName | camelCase}}Split[1]
	{%- else %}
		{{parameterName | camelCase}}Split[0],
	{%- endif %}
	{%- set counter = counter + 1 %}
	{%- endfor %}

};


{%- set counter = 0 %}
{%- set prevParameterName = null %}
{%- for parameterName, parameter in channelParameters %}
{%- if counter == 0 %}
channel = channel.Substring(splits[{{counter}}].Length);
{%- else %}
channel = channel.Substring({{prevParameterName}}End+splits[{{counter}}].Length);
{%- endif %}
var {{parameterName | camelCase}}End = channel.IndexOf(splits[{{counter+1}}]);
var {{parameterName | camelCase}}Param = channel.Substring(0, {{parameterName | camelCase}}End);
{%- set counter = counter + 1 %}
{%- set prevParameterName = (parameterName | camelCase) %}
{%- endfor %}
{# 
{%- for parameterName, parameter in channelParameters %}
var {{parameterName | camelCase}}Split = unmodifiedChannel.Split(new string[] { "{{'{'+ parameterName + '}'}}" }, StringSplitOptions.None);
var {{parameterName | camelCase}}Start = {{parameterName | camelCase}}Split[0].Length;
var {{parameterName | camelCase}}End = {{parameterName | camelCase}}Split[1].Length;
var {{parameterName | camelCase}}Length = args.Subject.Length - ({{parameterName | camelCase}}Start + {{parameterName | camelCase}}End );

{{parameter.schema().type() | toCType}} {{parameterName | camelCase}}Param;
try
{
	{{parameterName | camelCase}}Param = args.Subject.Substring({{parameterName | camelCase}}Start, {{parameterName | camelCase}}Length);
}
catch(ArgumentOutOfRangeException e)
{
	logger.Error($"Exception when trying to find the parameter {{parameterName | camelCase}}: " + e.Message);
	return;
}
logger.Debug($"Received channel parameter {{parameterName | camelCase}} was { {{ parameterName | camelCase}}Param}");
{%- endfor %} #}
{%- endif %}
{% endmacro %}
