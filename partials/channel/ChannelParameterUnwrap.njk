
{% macro unwrap(channelName, channelParameters) %}

{%- if channelParameters | length %}
var unmodifiedChannel = {{channelName | realizeChannelNameWithoutParameters | safe}};
var channel = args.Subject;

{%- for parameterName, parameter in channelParameters %}
{%- if prevParameterName | length %}
	var {{parameterName | camelCase}}Split = {{prevParameterName}}Split[1].Split(new string[] { "{{'{'+ parameterName + '}'}}" }, StringSplitOptions.None);
{%- else %}
	var {{parameterName | camelCase}}Split = unmodifiedChannel.Split(new string[] { "{{'{'+ parameterName + '}'}}" }, StringSplitOptions.None);
{%- endif %}
{%- set prevParameterName = (parameterName | camelCase) %}
{%- endfor %}


String[] splits = {
	{%- set counter = 1 %}
	{%- for parameterName, parameter in channelParameters %}
	{%- if counter == (channelParameters | length) %}
		{{parameterName | camelCase}}Split[0],
		{{parameterName | camelCase}}Split[1]
	{%- else %}
		{{parameterName | camelCase}}Split[0],
	{%- endif %}
	{%- set counter = counter + 1 %}
	{%- endfor %}
};


{%- set counter = 0 %}
{%- set prevParameterName = null %}
{%- for parameterName, parameter in channelParameters %}
{%- if counter == 0 %}
channel = channel.Substring(splits[{{counter}}].Length);
{%- else %}
channel = channel.Substring({{prevParameterName}}End+splits[{{counter}}].Length);
{%- endif %}
var {{parameterName | camelCase}}End = channel.IndexOf(splits[{{counter+1}}]);
{%- set paramVarToCast = 'channel.Substring(0, ' + (parameterName | camelCase) + 'End)' %}
var {{parameterName | camelCase}}Param = {{parameter.schema().type() | castToCType(paramVarToCast) | safe}};
{%- set counter = counter + 1 %}
{%- set prevParameterName = (parameterName | camelCase) %}
{%- endfor %}
{%- endif %}
{% endmacro %}
